{"version":3,"sources":["webpack:///./src/templates/navermaps/Map.vue?4a82","webpack:///src/templates/navermaps/Map.vue","webpack:///./src/templates/navermaps/Map.vue?abcc","webpack:///./src/templates/navermaps/Map.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","style","attrs","_t","staticRenderFns","component"],"mappings":"yHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAON,EAAY,SAAEO,MAAM,CAAC,GAAK,mBAAmB,CAACP,EAAIQ,GAAG,YAAY,IAC9KC,EAAkB,GCOtB,GACE,KAAF,MACE,MAAF,CACI,MAAJ,OACI,OAAJ,OACI,WAAJ,CACM,KAAN,QAEI,WAAJ,OAEE,SAAF,CACM,WACI,IAAV,oCACA,sCACU,MAAV,CACc,MAAd,EACc,OAAd,KAIE,OACE,MAAJ,CAIM,IAAN,KACM,gBAAN,IAGE,MAAF,CACI,WAAJ,CACM,QAAN,GACQ,KAAR,qBAIE,QAAF,CAMI,cAAJ,GAGM,OAFA,KAAN,4EACM,KAAN,cACA,MAMI,iBAAJ,GAGM,OAFA,KAAN,+EACM,KAAN,cACA,MAMI,YAAJ,GAEM,OADA,KAAN,4BACA,MAMI,QAAJ,KAEM,OADA,KAAN,iBACA,MAOI,UACE,KAAN,cACM,KAAN,SACM,KAAN,YAMI,UAAJ,KAEM,OADA,KAAN,mBACA,MAQI,MAAJ,OAKM,OAJN,EACA,wBACA,oBACA,kBACA,MAMI,MAAJ,KACM,KAAN,gBAOI,YAAJ,OACM,KAAN,wBAOI,MAAJ,KAEM,OADA,KAAN,4CACA,MAMI,QAAJ,MAEM,OADA,KAAN,eACA,MAMI,WAAJ,GAEM,OADA,KAAN,kBACA,MAOI,SAAJ,KAEM,OADA,KAAN,mBACA,MAQI,OAAJ,UAGM,OAFN,qBACA,eACA,MAQI,YACE,OAAN,sBAMI,YACE,OAAN,2BAMI,iBACE,OAAN,2BAKI,aACE,OAAN,uBAMI,eACE,OAAN,yBAOI,WAAJ,GACM,OAAN,gDAKI,WACE,OAAN,qBAKI,yBACE,OAAN,mCAKI,gBACE,OAAN,0BAKI,UACE,OAAN,oBAKI,UACE,OAAN,oBASI,UAAJ,OAEM,OADA,KAAN,4DACA,MAOI,eAAJ,GAEM,OADA,KAAN,sBACA,MAOI,aAAJ,GAEM,OADA,KAAN,yCACA,MAOI,WAAJ,UACM,IAAN,SAGA,8DACM,OAHN,2BACA,uBAEA,MAMI,QAAJ,GAEM,OADA,KAAN,eACA,MAOI,QAAJ,QAEM,OADA,KAAN,iBACA,MAOI,0BACE,IAAN,YAIQ,MAAR,GACU,aAAV,EACU,OAAV,sEACU,QAAV,GACU,QAAV,GAKQ,GAAR,kBACU,MAAV,GACY,WAAZ,kGACY,WAAZ,oBAEA,iBACU,GAAV,uHACU,EAAV,qGACU,EAAV,kDACU,EAAV,QAIA,OACA,SAIQ,KAAR,iFAKA,kKAKQ,OAAR,2CACQ,OAAR,sBACQ,OAAR,oBACQ,OAAR,0BACQ,KAAR,qBACA,uBAGE,UAIE,IAAJ,0CAiBA,4DAbA,4CAKQ,SAAR,6CACA,iBACY,SAAZ,qGACc,WAAd,yCAEA,oECxXqP,I,YCOjPC,EAAY,eACd,EACAX,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAC,E","file":"js/chunk-2d0c7d0f.e3951aba.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{style:(_vm.mapStyle),attrs:{\"id\":\"vue-naver-maps\"}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div id=\"vue-naver-maps\" :style=\"mapStyle\">\r\n    <slot>\r\n    </slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: 'Map',\r\n    props: {\r\n      width: Number,\r\n      height: Number,\r\n      mapOptions: {\r\n        type: Object\r\n      },\r\n      initLayers: Array\r\n    },\r\n    computed: {\r\n        mapStyle() {\r\n            let w = this.width?this.width+'px':'100%';\r\n            let h = this.height?this.height+'px':'100%';\r\n            return {\r\n                width: w,\r\n                height: h\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n      return {\r\n        /**\r\n         * @type {naver.maps.Map}\r\n         */\r\n        map: null,\r\n        styleMapLoaded: false,\r\n      }\r\n    },\r\n    watch: {\r\n      mapOptions: {\r\n        handler(newValue) {\r\n          this.map.setOptions(newValue);\r\n        },\r\n      }\r\n    },\r\n    methods: {\r\n      /* Normal Method */\r\n      /**\r\n       * @param layerName {string}\r\n       * @returns this\r\n       */\r\n      addStyleLayer(layerName) {\r\n        this.map.mapTypes.selectedMapType.addLayer(window.naver.maps.StyleMapLayerId[layerName]);\r\n        this.map.refresh();\r\n        return this;\r\n      },\r\n      /**\r\n       * @param layerName {string}\r\n       * @returns this\r\n       */\r\n      removeStyleLayer(layerName) {\r\n        this.map.mapTypes.selectedMapType.removeLayer(window.naver.maps.StyleMapLayerId[layerName]);\r\n        this.map.refresh();\r\n        return this;\r\n      },\r\n      /**\r\n       * @param layerName {string}\r\n       * @returns this\r\n       */\r\n      removeLayer(layerName) {\r\n        this.map.mapTypes.removeLayer(layerName);\r\n        return this\r\n      },\r\n      /**\r\n       * @param name {string}\r\n       * @param elementOrZIndex {HTMLElement | number}\r\n       */\r\n      addPane(name, elementOrZIndex) {\r\n        this.map.addPane(name, elementOrZIndex);\r\n        return this;\r\n      },\r\n      /**\r\n       * delete this map which includes all event and dom element.\r\n       * *** Warning! ***\r\n       *  This method will be delete the map object of this component.\r\n       */\r\n      destroy() {\r\n        this.map.destory();\r\n        this.map = null;\r\n        this.$destroy();\r\n      },\r\n      /**\r\n       * @param {naver.maps.Bounds | naver.maps.BoundsLiteral | naver.maps.ArrayOfCoords | naver.maps.ArrayOfCoordsLiteral} bounds\r\n       * @param {number} margin\r\n       */\r\n      fitBounds(bounds, margin) {\r\n        this.map.fitBounds(bounds, margin);\r\n        return this;\r\n      },\r\n      /**\r\n       * @param coord {naver.maps.Coord | naver.maps.CoordLiteral}\r\n       * @param zoom {number} optional\r\n       * @param transitionOptions {naver.maps.TransitionOptions} optional\r\n       * @returns this\r\n       */\r\n      morph(coord, zoom, transitionOptions) {\r\n        if (zoom) {\r\n          if (transitionOptions) this.map.morph(coord, zoom, transitionOptions);\r\n          else this.map.morph(coord, zoom)\r\n        } else this.map.morph(coord);\r\n        return this;\r\n      },\r\n      /**\r\n       * @param {naver.maps.Coord | naver.maps.CoordLiteral} coord\r\n       * @param {naver.maps.TransitionOptions} transitionOptions\r\n       */\r\n      panTo(coord, transitionOptions) {\r\n        this.map.panTo(coord, transitionOptions);\r\n      },\r\n      /**\r\n       * @param {naver.maps.Bounds | naver.maps.BoundsLiteral} bounds\r\n       * @param {naver.maps.TransitionOptions} transitionOptions\r\n       * @param {number} margin\r\n       */\r\n      panToBounds(bounds, transitionOptions, margin) {\r\n        this.map.panToBounds(bounds, transitionOptions, margin);\r\n      },\r\n      /**\r\n       * @param {number} x\r\n       * @param {number} y\r\n       * @returns this\r\n       */\r\n      panBy(x, y) {\r\n        this.map.panBy(new window.naver.maps.Point(x, y));\r\n        return this;\r\n      },\r\n      /**\r\n       * @param noEffect {boolean}\r\n       * @returns this\r\n       */\r\n      refresh(noEffect = false) {\r\n        this.map.refresh(noEffect);\r\n        return this;\r\n      },\r\n      /**\r\n       * @param name {string}\r\n       * @returns this\r\n       */\r\n      removePane(name) {\r\n        this.map.removePane(name);\r\n        return this;\r\n      },\r\n      /**\r\n       * @returns this\r\n       * @param coord {naver.maps.Coord | naver.maps.CoordLiteral}\r\n       * @param zoom {number}\r\n       */\r\n      updateBy(coord, zoom) {\r\n        this.map.updateBy(name);\r\n        return this;\r\n      },\r\n      /**\r\n       * @returns this\r\n       * @param deltaZoom {number}\r\n       * @param zoomOrigin {naver.maps.Coord | naver.maps.CoordLiteral} default is center\r\n       * @param effect {boolean}\r\n       */\r\n      zoomBy(deltaZoom, zoomOrigin = undefined, effect = false) {\r\n        if (zoomOrigin) this.zoomBy(deltaZoom, zoomOrigin, effect);\r\n        else this.zoomBy(deltaZoom);\r\n        return this;\r\n      },\r\n\r\n      /* Getter Methods */\r\n\r\n      /**\r\n       * @returns {naver.maps.Bounds}\r\n       */\r\n      getBounds() {\r\n        return this.map.getBounds();\r\n      },\r\n      /**\r\n       * the center coordinates of a map\r\n       * @returns {naver.maps.Coord}\r\n       */\r\n      getCenter() {\r\n        return this.map.getCenterPoint();\r\n      },\r\n      /**\r\n       * The result of converting the map's center coordinates to the world coordinates.\r\n       * @returns {naver.maps.Coord}\r\n       */\r\n      getCenterPoint() {\r\n        return this.map.getCenterPoint();\r\n      },\r\n      /**\r\n       * @returns {HTMLElement}\r\n       */\r\n      getElement() {\r\n        return this.map.getElement();\r\n      },\r\n      /**\r\n       * returns type id of this map.\r\n       * @returns {string}\r\n       */\r\n      getMapTypeId() {\r\n        return this.map.getMapTypeId();\r\n      },\r\n      /**\r\n       * returns options of this map.\r\n       * @param key {string}\r\n       * @returns any\r\n       */\r\n      getOptions(key = undefined) {\r\n        return key ? this.map.getOptions(key) : this.map.getOptions();\r\n      },\r\n      /**\r\n       * @returns {naver.maps.MapPanes}\r\n       */\r\n      getPanes() {\r\n        return this.map.getPanes();\r\n      },\r\n      /**\r\n       * @returns {naver.maps.Projection}\r\n       */\r\n      getPrimitiveProjection() {\r\n        return this.map.getPrimitiveProjection();\r\n      },\r\n      /**\r\n       * @returns {naver.maps.MapSystemProjection}\r\n       */\r\n      getProjection() {\r\n        return this.map.getProjection();\r\n      },\r\n      /**\r\n       * @returns {naver.maps.Size}\r\n       */\r\n      getSize() {\r\n        return this.map.getSize();\r\n      },\r\n      /**\r\n       * @returns {number}\r\n       */\r\n      getZoom() {\r\n        return this.map.getZoom();\r\n      },\r\n\r\n      /* Setter Methods */\r\n      /**\r\n       * @param {number | naver.maps.LatLng | naver.maps.LatLngLiteral} latOrLatLng\r\n       * @param {number} lng\r\n       * @returns this\r\n       */\r\n      setCenter(latOrLatLng, lng = 0) {\r\n        this.map.setCenter(isNaN(latOrLatLng) ? latOrLatLng : new window.naver.maps.LatLng(latOrLatLng, lng));\r\n        return this;\r\n\r\n      },\r\n      /**\r\n       * @param {naver.maps.Point | naver.maps.PointLiteral} point\r\n       * @returns this\r\n       */\r\n      setCenterPoint(point) {\r\n        this.map.setCenterPoint(point);\r\n        return this;\r\n\r\n      },\r\n      /**\r\n       * @param {string} type NORMAL, TERRAIN, SATELLITE, HYBRID\r\n       * @returns this\r\n       */\r\n      setMapTypeId(type) {\r\n        this.map.setMapTypeId(naver.maps.Position[type]);\r\n        return this;\r\n      },\r\n      /**\r\n       * @param {naver.maps.MapOptions | string} optionsOrKey\r\n       * @param {naver.maps.MapOptions} value optional\r\n       * @returns this\r\n       */\r\n      setOptions(optionsOrKey, value = null) {\r\n        if (this.map) {\r\n          if (value) this.map.setOptions(optionsOrKey, value);\r\n          else this.map.setOptions(optionsOrKey);\r\n        } else throw new Error('setOptions not be available before loaded.');\r\n        return this;\r\n      },\r\n      /**\r\n       * @param {naver.maps.Size | naver.maps.SizeLiteral} size\r\n       * @returns this\r\n       */\r\n      setSize(size) {\r\n        this.map.setSize(size);\r\n        return this;\r\n      },\r\n      /**\r\n       * @param {number} level must be int\r\n       * @param {boolean} useEffect\r\n       * @returns this\r\n       */\r\n      setZoom(level, useEffect = false) {\r\n        this.map.setZoom(level, useEffect);\r\n        return this;\r\n\r\n      },\r\n\r\n      /**\r\n       * @description load naver maps\r\n       */\r\n      loadNaverMapsComponents() {\r\n        new Promise(resolve => {\r\n          /**\r\n           * settings\r\n           */\r\n          const settings = {\r\n            useStyleMap: true,\r\n            center: new window.naver.maps.LatLng(this.mapOptions.lat, this.mapOptions.lng),\r\n            maxZoom: 20,\r\n            minZoom: 0,\r\n          };\r\n          /**\r\n           * use style map\r\n           */\r\n          if (this.useStyleMap) {\r\n            const layers = {\r\n              BACKGROUND: 'bg', BACKGROUND_DETAIL: 'ol', BYCYCLE: 'br', CADASTRAL: 'lp', CTT: 'ctt', HIKING_TRAIL: 'ar', PANORAMA: 'ps',\r\n              POI_KOREAN: 'lko', TRANSIT: 'ts'\r\n            };\r\n            const keys = Object.keys(layers);\r\n            if (this.initLayers.map(v => keys.includes(v)).includes(false)) throw '[vue-naver-maps] Invalid StyledMap layer name in initLayers!';\r\n            settings.mapTypes = window.naver.maps.StyleMapTypeOption.getMapTypes({initLayers: this.initLayers.map(v => layers[v])});\r\n            settings.mapTypeId = window.naver.maps.StyleMapTypeId.NORMAL;\r\n            resolve(settings);\r\n            /**\r\n             * if script unloaded\r\n             */\r\n          } else resolve(settings);\r\n        }).then(settings => {\r\n          /**\r\n           * Creating map\r\n           */\r\n          this.map = new window.naver.maps.Map('vue-naver-maps', Object.assign(settings, this.mapOptions));\r\n\r\n          /**\r\n           * zoomControl options\r\n           */\r\n          if (this.zoomControlOptions && this.zoomControlOptions.position) this.setOptions({zoomControlOptions: {position: naver.maps.Position[this.zoomControlOptions.position]}});\r\n\r\n          /**\r\n           * call callback function\r\n           */\r\n          window.$naverMapsCallback.forEach(v => v(this.map));\r\n          window.$naverMapsCallback = [];\r\n          window.$naverMapsLoaded = true;\r\n          window.$naverMapsObject = this.map;\r\n          this.$emit('load', this);\r\n        }).catch(console.error);\r\n      }\r\n    },\r\n    mounted() {\r\n      /**\r\n       * Checking to exist Map options which is must be included.\r\n       */\r\n      if (this.mapOptions.lat && this.mapOptions.lng) {\r\n        /**\r\n         * When the script already loaded.\r\n         */\r\n        if (window.naver) this.loadNaverMapsComponents();\r\n        else {\r\n          /**\r\n           * When the script loaded.\r\n           */\r\n          document.getElementById('naver-map-load').onload = () => {\r\n            if (this.useStyleMap) {\r\n              document.querySelector('script[src=\"https://openapi.map.naver.com/openapi/v3/maps-stylemap.js\"]').onload = () => {\r\n                setTimeout(() => this.loadNaverMapsComponents(), 100);\r\n              }\r\n            } else window.naver.maps.onJSContentLoaded = this.loadNaverMapsComponents;\r\n          }\r\n        }\r\n      } else throw new Error('mapOptions must be included lat and lng.');\r\n    }\r\n  }\r\n</script>","import mod from \"-!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/vuetify-loader/lib/loader.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=42a40b4a&\"\nimport script from \"./Map.vue?vue&type=script&lang=js&\"\nexport * from \"./Map.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/templates/items/Map.vue?a6a5","webpack:///src/templates/items/Map.vue","webpack:///./src/templates/items/Map.vue?7c0f","webpack:///./src/templates/items/Map.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","style","attrs","_t","staticRenderFns","component"],"mappings":"uHAAA,IAAIA,EAAS,WAAa,IAAIC,EAAIC,KAASC,EAAGF,EAAIG,eAAmBC,EAAGJ,EAAIK,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACE,MAAON,EAAY,SAAEO,MAAM,CAAC,GAAK,mBAAmB,CAACP,EAAIQ,GAAG,YAAY,IAC9KC,EAAkB,GCOtB,GACE,KAAF,MACE,MAAF,CACI,MAAJ,OACI,OAAJ,OACI,WAAJ,CACM,KAAN,QAEI,WAAJ,MACI,SAAJ,OAEE,SAAF,CACM,WACI,IAAV,oCACA,sCACU,MAAV,CACc,MAAd,EACc,OAAd,KAIE,OACE,MAAJ,CAIM,IAAN,KACM,gBAAN,IAGE,MAAF,CACI,WAAJ,CACM,QAAN,GACQ,KAAR,qBAIE,QAAF,CAEI,WAAJ,GAEM,OADA,KAAN,uBACA,MAEI,WAAJ,GAEM,OADA,KAAN,uBACA,MAQI,cAAJ,GAGM,OAFA,KAAN,4EACM,KAAN,cACA,MAMI,iBAAJ,GAGM,OAFA,KAAN,+EACM,KAAN,cACA,MAMI,YAAJ,GAEM,OADA,KAAN,4BACA,MAMI,QAAJ,KAEM,OADA,KAAN,iBACA,MAOI,UACE,KAAN,cACM,KAAN,SACM,KAAN,YAMI,UAAJ,KAEM,OADA,KAAN,mBACA,MAQI,MAAJ,OAKM,OAJN,EACA,wBACA,oBACA,kBACA,MAMI,MAAJ,KACM,KAAN,gBAOI,YAAJ,OACM,KAAN,wBAOI,MAAJ,KAEM,OADA,KAAN,4CACA,MAMI,QAAJ,MAEM,OADA,KAAN,eACA,MAMI,WAAJ,GAEM,OADA,KAAN,kBACA,MAOI,SAAJ,KAEM,OADA,KAAN,mBACA,MAQI,OAAJ,UAGM,OAFN,qBACA,eACA,MAQI,YACE,OAAN,sBAMI,YACE,OAAN,2BAMI,iBACE,OAAN,2BAKI,aACE,OAAN,uBAMI,eACE,OAAN,yBAOI,WAAJ,GACM,OAAN,gDAKI,WACE,OAAN,qBAKI,yBACE,OAAN,mCAKI,gBACE,OAAN,0BAKI,UACE,OAAN,oBAKI,UACE,OAAN,oBASI,UAAJ,OAEM,OADA,KAAN,4DACA,MAOI,eAAJ,GAEM,OADA,KAAN,sBACA,MAOI,aAAJ,GAEM,OADA,KAAN,yCACA,MAOI,WAAJ,UACM,IAAN,SAGA,8DACM,OAHN,2BACA,uBAEA,MAMI,QAAJ,GAEM,OADA,KAAN,eACA,MAOI,QAAJ,QAEM,OADA,KAAN,iBACA,MAOI,0BACE,IAAN,YAIQ,MAAR,GACU,aAAV,EACU,OAAV,sEACU,QAAV,GACU,QAAV,GAKQ,GAAR,kBACU,MAAV,GACY,WAAZ,kGACY,WAAZ,oBAEA,iBACU,GAAV,uHACU,EAAV,qGACU,EAAV,kDACU,EAAV,QAIA,OACA,SAIQ,KAAR,iFAKA,kKAKQ,OAAR,2CACQ,OAAR,sBACQ,OAAR,oBACQ,OAAR,0BACQ,KAAR,yBACA,uBAGE,UAIE,IAAJ,0CAiBA,4DAbA,4CAKQ,SAAR,6CACA,iBACY,SAAZ,qGACc,WAAd,yCAEA,oECnYgQ,I,YCO5PC,EAAY,eACd,EACAX,EACAU,GACA,EACA,KACA,KACA,MAIa,aAAAC,E","file":"js/chunk-2d22c2e6.b7bca2f9.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{style:(_vm.mapStyle),attrs:{\"id\":\"vue-naver-maps\"}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div id=\"vue-naver-maps\" :style=\"mapStyle\">\n    <slot>\n    </slot>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'Map',\n    props: {\n      width: Number,\n      height: Number,\n      mapOptions: {\n        type: Object\n      },\n      initLayers: Array,\n      features: Array,\n    },\n    computed: {\n        mapStyle() {\n            let w = this.width?this.width+'px':'100%';\n            let h = this.height?this.height+'px':'100%';\n            return {\n                width: w,\n                height: h\n            }\n        }\n    },\n    data() {\n      return {\n        /**\n         * @type {naver.maps.Map}\n         */\n        map: null,\n        styleMapLoaded: false,\n      }\n    },\n    watch: {\n      mapOptions: {\n        handler(newValue) {\n          this.map.setOptions(newValue);\n        },\n      }\n    },\n    methods: {\n\n      addGeoJson(features) {\n        this.map.data.addGeoJson(features);\n        return this;\n      },\n      addFeature(feature) {\n        this.map.data.addFeature(feature);\n        return this;\n      },\n\n      /* Normal Method */\n      /**\n       * @param layerName {string}\n       * @returns this\n       */\n      addStyleLayer(layerName) {\n        this.map.mapTypes.selectedMapType.addLayer(window.naver.maps.StyleMapLayerId[layerName]);\n        this.map.refresh();\n        return this;\n      },\n      /**\n       * @param layerName {string}\n       * @returns this\n       */\n      removeStyleLayer(layerName) {\n        this.map.mapTypes.selectedMapType.removeLayer(window.naver.maps.StyleMapLayerId[layerName]);\n        this.map.refresh();\n        return this;\n      },\n      /**\n       * @param layerName {string}\n       * @returns this\n       */\n      removeLayer(layerName) {\n        this.map.mapTypes.removeLayer(layerName);\n        return this\n      },\n      /**\n       * @param name {string}\n       * @param elementOrZIndex {HTMLElement | number}\n       */\n      addPane(name, elementOrZIndex) {\n        this.map.addPane(name, elementOrZIndex);\n        return this;\n      },\n      /**\n       * delete this map which includes all event and dom element.\n       * *** Warning! ***\n       *  This method will be delete the map object of this component.\n       */\n      destroy() {\n        this.map.destory();\n        this.map = null;\n        this.$destroy();\n      },\n      /**\n       * @param {naver.maps.Bounds | naver.maps.BoundsLiteral | naver.maps.ArrayOfCoords | naver.maps.ArrayOfCoordsLiteral} bounds\n       * @param {number} margin\n       */\n      fitBounds(bounds, margin) {\n        this.map.fitBounds(bounds, margin);\n        return this;\n      },\n      /**\n       * @param coord {naver.maps.Coord | naver.maps.CoordLiteral}\n       * @param zoom {number} optional\n       * @param transitionOptions {naver.maps.TransitionOptions} optional\n       * @returns this\n       */\n      morph(coord, zoom, transitionOptions) {\n        if (zoom) {\n          if (transitionOptions) this.map.morph(coord, zoom, transitionOptions);\n          else this.map.morph(coord, zoom)\n        } else this.map.morph(coord);\n        return this;\n      },\n      /**\n       * @param {naver.maps.Coord | naver.maps.CoordLiteral} coord\n       * @param {naver.maps.TransitionOptions} transitionOptions\n       */\n      panTo(coord, transitionOptions) {\n        this.map.panTo(coord, transitionOptions);\n      },\n      /**\n       * @param {naver.maps.Bounds | naver.maps.BoundsLiteral} bounds\n       * @param {naver.maps.TransitionOptions} transitionOptions\n       * @param {number} margin\n       */\n      panToBounds(bounds, transitionOptions, margin) {\n        this.map.panToBounds(bounds, transitionOptions, margin);\n      },\n      /**\n       * @param {number} x\n       * @param {number} y\n       * @returns this\n       */\n      panBy(x, y) {\n        this.map.panBy(new window.naver.maps.Point(x, y));\n        return this;\n      },\n      /**\n       * @param noEffect {boolean}\n       * @returns this\n       */\n      refresh(noEffect = false) {\n        this.map.refresh(noEffect);\n        return this;\n      },\n      /**\n       * @param name {string}\n       * @returns this\n       */\n      removePane(name) {\n        this.map.removePane(name);\n        return this;\n      },\n      /**\n       * @returns this\n       * @param coord {naver.maps.Coord | naver.maps.CoordLiteral}\n       * @param zoom {number}\n       */\n      updateBy(coord, zoom) {\n        this.map.updateBy(name);\n        return this;\n      },\n      /**\n       * @returns this\n       * @param deltaZoom {number}\n       * @param zoomOrigin {naver.maps.Coord | naver.maps.CoordLiteral} default is center\n       * @param effect {boolean}\n       */\n      zoomBy(deltaZoom, zoomOrigin = undefined, effect = false) {\n        if (zoomOrigin) this.zoomBy(deltaZoom, zoomOrigin, effect);\n        else this.zoomBy(deltaZoom);\n        return this;\n      },\n\n      /* Getter Methods */\n\n      /**\n       * @returns {naver.maps.Bounds}\n       */\n      getBounds() {\n        return this.map.getBounds();\n      },\n      /**\n       * the center coordinates of a map\n       * @returns {naver.maps.Coord}\n       */\n      getCenter() {\n        return this.map.getCenterPoint();\n      },\n      /**\n       * The result of converting the map's center coordinates to the world coordinates.\n       * @returns {naver.maps.Coord}\n       */\n      getCenterPoint() {\n        return this.map.getCenterPoint();\n      },\n      /**\n       * @returns {HTMLElement}\n       */\n      getElement() {\n        return this.map.getElement();\n      },\n      /**\n       * returns type id of this map.\n       * @returns {string}\n       */\n      getMapTypeId() {\n        return this.map.getMapTypeId();\n      },\n      /**\n       * returns options of this map.\n       * @param key {string}\n       * @returns any\n       */\n      getOptions(key = undefined) {\n        return key ? this.map.getOptions(key) : this.map.getOptions();\n      },\n      /**\n       * @returns {naver.maps.MapPanes}\n       */\n      getPanes() {\n        return this.map.getPanes();\n      },\n      /**\n       * @returns {naver.maps.Projection}\n       */\n      getPrimitiveProjection() {\n        return this.map.getPrimitiveProjection();\n      },\n      /**\n       * @returns {naver.maps.MapSystemProjection}\n       */\n      getProjection() {\n        return this.map.getProjection();\n      },\n      /**\n       * @returns {naver.maps.Size}\n       */\n      getSize() {\n        return this.map.getSize();\n      },\n      /**\n       * @returns {number}\n       */\n      getZoom() {\n        return this.map.getZoom();\n      },\n\n      /* Setter Methods */\n      /**\n       * @param {number | naver.maps.LatLng | naver.maps.LatLngLiteral} latOrLatLng\n       * @param {number} lng\n       * @returns this\n       */\n      setCenter(latOrLatLng, lng = 0) {\n        this.map.setCenter(isNaN(latOrLatLng) ? latOrLatLng : new window.naver.maps.LatLng(latOrLatLng, lng));\n        return this;\n\n      },\n      /**\n       * @param {naver.maps.Point | naver.maps.PointLiteral} point\n       * @returns this\n       */\n      setCenterPoint(point) {\n        this.map.setCenterPoint(point);\n        return this;\n\n      },\n      /**\n       * @param {string} type NORMAL, TERRAIN, SATELLITE, HYBRID\n       * @returns this\n       */\n      setMapTypeId(type) {\n        this.map.setMapTypeId(naver.maps.Position[type]);\n        return this;\n      },\n      /**\n       * @param {naver.maps.MapOptions | string} optionsOrKey\n       * @param {naver.maps.MapOptions} value optional\n       * @returns this\n       */\n      setOptions(optionsOrKey, value = null) {\n        if (this.map) {\n          if (value) this.map.setOptions(optionsOrKey, value);\n          else this.map.setOptions(optionsOrKey);\n        } else throw new Error('setOptions not be available before loaded.');\n        return this;\n      },\n      /**\n       * @param {naver.maps.Size | naver.maps.SizeLiteral} size\n       * @returns this\n       */\n      setSize(size) {\n        this.map.setSize(size);\n        return this;\n      },\n      /**\n       * @param {number} level must be int\n       * @param {boolean} useEffect\n       * @returns this\n       */\n      setZoom(level, useEffect = false) {\n        this.map.setZoom(level, useEffect);\n        return this;\n\n      },\n\n      /**\n       * @description load naver maps\n       */\n      loadNaverMapsComponents() {\n        new Promise(resolve => {\n          /**\n           * settings\n           */\n          const settings = {\n            useStyleMap: true,\n            center: new window.naver.maps.LatLng(this.mapOptions.lat, this.mapOptions.lng),\n            maxZoom: 20,\n            minZoom: 0,\n          };\n          /**\n           * use style map\n           */\n          if (this.useStyleMap) {\n            const layers = {\n              BACKGROUND: 'bg', BACKGROUND_DETAIL: 'ol', BYCYCLE: 'br', CADASTRAL: 'lp', CTT: 'ctt', HIKING_TRAIL: 'ar', PANORAMA: 'ps',\n              POI_KOREAN: 'lko', TRANSIT: 'ts'\n            };\n            const keys = Object.keys(layers);\n            if (this.initLayers.map(v => keys.includes(v)).includes(false)) throw '[vue-naver-maps] Invalid StyledMap layer name in initLayers!';\n            settings.mapTypes = window.naver.maps.StyleMapTypeOption.getMapTypes({initLayers: this.initLayers.map(v => layers[v])});\n            settings.mapTypeId = window.naver.maps.StyleMapTypeId.NORMAL;\n            resolve(settings);\n            /**\n             * if script unloaded\n             */\n          } else resolve(settings);\n        }).then(settings => {\n          /**\n           * Creating map\n           */\n          this.map = new window.naver.maps.Map('vue-naver-maps', Object.assign(settings, this.mapOptions));\n\n          /**\n           * zoomControl options\n           */\n          if (this.zoomControlOptions && this.zoomControlOptions.position) this.setOptions({zoomControlOptions: {position: naver.maps.Position[this.zoomControlOptions.position]}});\n\n          /**\n           * call callback function\n           */\n          window.$naverMapsCallback.forEach(v => v(this.map));\n          window.$naverMapsCallback = [];\n          window.$naverMapsLoaded = true;\n          window.$naverMapsObject = this.map;\n          this.$emit('load', this.map);\n        }).catch(console.error);\n      }\n    },\n    mounted() {\n      /**\n       * Checking to exist Map options which is must be included.\n       */\n      if (this.mapOptions.lat && this.mapOptions.lng) {\n        /**\n         * When the script already loaded.\n         */\n        if (window.naver) this.loadNaverMapsComponents();\n        else {\n          /**\n           * When the script loaded.\n           */\n          document.getElementById('naver-map-load').onload = () => {\n            if (this.useStyleMap) {\n              document.querySelector('script[src=\"https://openapi.map.naver.com/openapi/v3/maps-stylemap.js\"]').onload = () => {\n                setTimeout(() => this.loadNaverMapsComponents(), 100);\n              }\n            } else window.naver.maps.onJSContentLoaded = this.loadNaverMapsComponents;\n          }\n        }\n      } else throw new Error('mapOptions must be included lat and lng.');\n    }\n  }\n</script>","import mod from \"-!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/vuetify-loader/lib/loader.js??ref--18-0!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Map.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Map.vue?vue&type=template&id=a987e780&\"\nimport script from \"./Map.vue?vue&type=script&lang=js&\"\nexport * from \"./Map.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}